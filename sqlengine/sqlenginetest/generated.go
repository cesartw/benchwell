// Code generated by MockGen. DO NOT EDIT.
// Source: ../driver/driver.go

// Package sqlenginetest is a generated GoMock package.
package sqlenginetest

import (
	reflect "reflect"

	driver "bitbucket.org/goreorto/sqlaid/sqlengine/driver"
	gomock "github.com/golang/mock/gomock"
)

// MockDriver is a mock of Driver interface
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockDriver) Connect(arg0 string) (driver.Connection, error) {
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(driver.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect
func (mr *MockDriverMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDriver)(nil).Connect), arg0)
}

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// UseDatabase mocks base method
func (m *MockConnection) UseDatabase(arg0 string) error {
	ret := m.ctrl.Call(m, "UseDatabase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseDatabase indicates an expected call of UseDatabase
func (mr *MockConnectionMockRecorder) UseDatabase(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseDatabase", reflect.TypeOf((*MockConnection)(nil).UseDatabase), arg0)
}

// Databases mocks base method
func (m *MockConnection) Databases() ([]driver.Database, error) {
	ret := m.ctrl.Call(m, "Databases")
	ret0, _ := ret[0].([]driver.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Databases indicates an expected call of Databases
func (mr *MockConnectionMockRecorder) Databases() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Databases", reflect.TypeOf((*MockConnection)(nil).Databases))
}

// Disconnect mocks base method
func (m *MockConnection) Disconnect() error {
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockConnectionMockRecorder) Disconnect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockConnection)(nil).Disconnect))
}

// Reconnect mocks base method
func (m *MockConnection) Reconnect() error {
	ret := m.ctrl.Call(m, "Reconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconnect indicates an expected call of Reconnect
func (mr *MockConnectionMockRecorder) Reconnect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockConnection)(nil).Reconnect))
}

// LastError mocks base method
func (m *MockConnection) LastError() error {
	ret := m.ctrl.Call(m, "LastError")
	ret0, _ := ret[0].(error)
	return ret0
}

// LastError indicates an expected call of LastError
func (mr *MockConnectionMockRecorder) LastError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastError", reflect.TypeOf((*MockConnection)(nil).LastError))
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Tables mocks base method
func (m *MockDatabase) Tables() ([]string, error) {
	ret := m.ctrl.Call(m, "Tables")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tables indicates an expected call of Tables
func (mr *MockDatabaseMockRecorder) Tables() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tables", reflect.TypeOf((*MockDatabase)(nil).Tables))
}

// FetchTable mocks base method
func (m *MockDatabase) FetchTable(page, pageSize int64) ([]string, [][]string, error) {
	ret := m.ctrl.Call(m, "FetchTable", page, pageSize)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([][]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchTable indicates an expected call of FetchTable
func (mr *MockDatabaseMockRecorder) FetchTable(page, pageSize interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTable", reflect.TypeOf((*MockDatabase)(nil).FetchTable), page, pageSize)
}

// DeleteRecord mocks base method
func (m *MockDatabase) DeleteRecord(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord
func (mr *MockDatabaseMockRecorder) DeleteRecord(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockDatabase)(nil).DeleteRecord), arg0)
}

// UpdateRecord mocks base method
func (m *MockDatabase) UpdateRecord(arg0 string, arg1, arg2 []string) (int, error) {
	ret := m.ctrl.Call(m, "UpdateRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecord indicates an expected call of UpdateRecord
func (mr *MockDatabaseMockRecorder) UpdateRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockDatabase)(nil).UpdateRecord), arg0, arg1, arg2)
}

// Name mocks base method
func (m *MockDatabase) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDatabaseMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDatabase)(nil).Name))
}
